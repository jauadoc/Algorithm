package com.sun.function;

/**
 * <b>渐近记号</b><br>
 * <li>1.Θ符号-渐近精确界</li><br>
 *  若存在正常量c1和c2，在n足够大时，使得f(x)被“夹入”c1g(n)和c2g(n)之间，则f(x)属于集合Θ(g(n))<br>
 *  我们称g(n)是f(n)的一个渐近紧确界（渐近精确界）<br>
 *  Θ(g(n))要求每个成员f(n)∈Θ(g(n))均渐近非负，也就是说当n足够大时，f(x)为正<br>
 *  0<=c1g(n)<=f(n)<=c2g(2) 对于某个c1、c2<br>
 * <li>2.O符号-渐近上界</li><br>
 *  Θ符号用来给出一个函数的上界和下界，当只有一个渐近上界时，使用符号O。<br>
 *  0<=f(n)<=cg(2)<br>
 * <li>3.Ω符号-渐近下界</li><br>
 *  Ω为渐近下界。
 *  0<=cg(n)<=f(n) 对于某个c成立<br>
 * <li><b>定理3.1：对于任意两个函数f(n)和g(n)，当且仅当f(n)=O(g(n))且f(n)=Ω(g(n))时，f(n)=Θ(g(n))</b></li><br>
 *  正确的确定渐近精确界的方法应该是先确定渐近上界和渐近下界来证明渐近精确界。<br>
 * <li>等式和不等式中的渐近记号</li><br>
 *  a.当渐进记号出现在等式或不等式中，该渐近记号仅仅用来表示一个不是关注点的匿名函数（该函数不影响全局，仅仅是为了简化或消除无关紧要的细节）。
 *  如归并排序中T(n)=2T(n/2)+D(n)+C(n)简化为T(n)=2T(n/2)+Θ(n) 因为合并和分解的时间并非我们的关注点。<br>
 *  b.当渐近符号出现在等式左边，如：2n^2+Θ(n)=Θ(n^2)，无论左边的Θ(n)怎样选择匿名函数，皆不影响等式成立<br>
 * <li>4.o符号</li><br>
 *  非渐近紧确上界<br>
 *  o(g(n))={f(n):对任意正常量c>0，存在常量n0>0，使得对所有的n>=n0，有0<=f(n)<cg(n)}<br>
 *  有上集合可知，任意常量c均存在0<=f(n)<cg(n)，所以当n-∞时，f(n)与g(n)的关系越来越小（相对于g(n)越来越微不足道，越来越无相关性）<br>
 *  lim n->∞ f(n)/g(n)=0<br>
 * <li>5.ω符号</li><br>
 *  非渐近紧确下界<br>
 *  ω(g(n))={f(n):对任意正常量c>0，存在常量n0>0，使得对所有的n>=n0，有0<=cg(n)<f(n)}<br>
 *  同理，函数与界的关系越来越小<br>
 *  lim n->∞ f(n)/g(n)=∞<br>
 * <li>6.渐近的函数性质<li><br>
 *  a.传递性：<br>
 *   f(n)=Θ(g(n))且 g(n)=Θ(h(n)) ===> f(n)=Θ(h(n))<br>
 *   其余四个渐近（OΩoω）均有此函数性质<br>
 *  b.自反性：<br>
 *   f(n)=Θ(f(n))<br>
 *   f(n)=O(f(n))<br>
 *   f(n)=ω(f(n))<br>
 *  c.对称性<br>
 *   f(n)=Θ(g(n))当且仅当g(n)=Θ(f(n))<br>
 *  d.转置对称性：<br>
 *   f(n)=O(g(n))当且仅当g(n)=Ω(g(n))<br>
 *   f(n)=o(g(n))当且仅当g(n)=ω(g(n))<br>
 * <b>总结：</b><br>
 *   渐近记号可以表示一种函数的趋势及关联，渐近则在某点之后函数之间逐步逼近，关联度越来越大（甚至应该可以替代，从而近似得到问题的解）。而本章的渐近则用于表示算法的时间复杂度，忽略不重要因素，渐近求出算法的效率<br>
 * @author sunx(sunxin@strongit.com.cn)<br/>
 * @version V1.0.0<br/>
 */

public class Asymptotic {

}


